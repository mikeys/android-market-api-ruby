#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

# forward declarations
class AppsRequest < ::ProtocolBuffers::Message; end
class AppsResponse < ::ProtocolBuffers::Message; end
class Category < ::ProtocolBuffers::Message; end
class CommentsRequest < ::ProtocolBuffers::Message; end
class CommentsResponse < ::ProtocolBuffers::Message; end
class App < ::ProtocolBuffers::Message; end
class Comment < ::ProtocolBuffers::Message; end
class CategoriesRequest < ::ProtocolBuffers::Message; end
class CategoriesResponse < ::ProtocolBuffers::Message; end
class SubCategoriesRequest < ::ProtocolBuffers::Message; end
class SubCategoriesResponse < ::ProtocolBuffers::Message; end
class RequestContext < ::ProtocolBuffers::Message; end
class GetImageRequest < ::ProtocolBuffers::Message; end
class GetAssetRequest < ::ProtocolBuffers::Message; end
class GetImageResponse < ::ProtocolBuffers::Message; end
class GetAssetResponse < ::ProtocolBuffers::Message; end
class Request < ::ProtocolBuffers::Message; end
class ResponseContext < ::ProtocolBuffers::Message; end
class Response < ::ProtocolBuffers::Message; end

# enums
module AppType
  include ::ProtocolBuffers::Enum

  set_fully_qualified_name "AppType"

  NONE = 0
  APPLICATION = 1
  RINGTONE = 2
  WALLPAPER = 3
  GAME = 4
end

class AppsRequest < ::ProtocolBuffers::Message
  # forward declarations

  # enums
  module OrderType
    include ::ProtocolBuffers::Enum

    set_fully_qualified_name "AppsRequest.OrderType"

    NONE = 0
    POPULAR = 1
    NEWEST = 2
    FEATURED = 3
  end

  module ViewType
    include ::ProtocolBuffers::Enum

    set_fully_qualified_name "AppsRequest.ViewType"

    ALL = 0
    FREE = 1
    PAID = 2
  end

  set_fully_qualified_name "AppsRequest"

  optional ::AppType, :appType, 1
  optional :string, :query, 2
  optional :string, :categoryId, 3
  optional :string, :appId, 4
  optional :bool, :withExtendedInfo, 6
  optional ::AppsRequest::OrderType, :orderType, 7, :default => ::AppsRequest::OrderType::NONE
  optional :uint64, :startIndex, 8
  optional :int32, :entriesCount, 9
  optional ::AppsRequest::ViewType, :viewType, 10, :default => ::AppsRequest::ViewType::ALL
end

class AppsResponse < ::ProtocolBuffers::Message
  set_fully_qualified_name "AppsResponse"

  repeated ::App, :app, 1
  optional :int32, :entriesCount, 2
end

class Category < ::ProtocolBuffers::Message
  set_fully_qualified_name "Category"

  optional :int32, :appType, 2
  optional :string, :title, 4
  optional :string, :categoryId, 3
  optional :string, :subtitle, 5
  repeated ::Category, :subCategories, 8
end

class CommentsRequest < ::ProtocolBuffers::Message
  set_fully_qualified_name "CommentsRequest"

  optional :string, :appId, 1
  optional :int32, :startIndex, 2
  optional :int32, :entriesCount, 3
end

class CommentsResponse < ::ProtocolBuffers::Message
  set_fully_qualified_name "CommentsResponse"

  repeated ::Comment, :comments, 1
  optional :int32, :entriesCount, 2
end

class App < ::ProtocolBuffers::Message
  # forward declarations
  class ExtendedInfo < ::ProtocolBuffers::Message; end

  set_fully_qualified_name "App"

  # nested messages
  class ExtendedInfo < ::ProtocolBuffers::Message
    set_fully_qualified_name "App.ExtendedInfo"

    optional :string, :description, 13
    optional :int32, :downloadsCount, 14
    repeated :string, :permissionId, 15
    optional :int32, :installSize, 16
    optional :string, :packageName, 17
    optional :string, :category, 18
    optional :string, :contactEmail, 20
    optional :string, :downloadsCountText, 23
    optional :string, :contactPhone, 26
    optional :string, :contactWebsite, 27
    optional :int32, :screenshotsCount, 30
    optional :string, :promoText, 31
    optional :string, :recentChanges, 38
    optional :string, :promotionalVideo, 43
  end

  optional :string, :id, 1
  optional :string, :title, 2
  optional ::AppType, :appType, 3, :default => ::AppType::NONE
  optional :string, :creator, 4
  optional :string, :version, 5
  optional :string, :price, 6
  optional :string, :rating, 7
  optional :int32, :ratingsCount, 8
  optional ::App::ExtendedInfo, :extendedinfo, 12, :group => true
  optional :string, :creatorId, 22
  optional :string, :packageName, 24
  optional :int32, :versionCode, 25
  optional :string, :priceCurrency, 32
  optional :int32, :priceMicros, 33
end

class Comment < ::ProtocolBuffers::Message
  set_fully_qualified_name "Comment"

  optional :string, :text, 1
  optional :int32, :rating, 2
  optional :string, :authorName, 3
  optional :uint64, :creationTime, 4
  optional :string, :authorId, 5
end

class CategoriesRequest < ::ProtocolBuffers::Message
  set_fully_qualified_name "CategoriesRequest"

end

class CategoriesResponse < ::ProtocolBuffers::Message
  set_fully_qualified_name "CategoriesResponse"

  repeated ::Category, :categories, 1
end

class SubCategoriesRequest < ::ProtocolBuffers::Message
  set_fully_qualified_name "SubCategoriesRequest"

  optional ::AppType, :appType, 1
end

class SubCategoriesResponse < ::ProtocolBuffers::Message
  set_fully_qualified_name "SubCategoriesResponse"

  repeated ::Category, :category, 1
  optional :string, :subCategoryDisplay, 2
  optional :int32, :subCategoryId, 3
end

class RequestContext < ::ProtocolBuffers::Message
  set_fully_qualified_name "RequestContext"

  required :string, :authSubToken, 1
  required :bool, :isSecure, 2
  required :int32, :version, 3
  required :string, :androidId, 4
  optional :string, :deviceAndSdkVersion, 5
  optional :string, :userLanguage, 6
  optional :string, :userCountry, 7
  optional :string, :operatorAlpha, 8
  optional :string, :simOperatorAlpha, 9
  optional :string, :operatorNumeric, 10
  optional :string, :simOperatorNumeric, 11
end

class GetImageRequest < ::ProtocolBuffers::Message
  # forward declarations

  # enums
  module AppImageUsage
    include ::ProtocolBuffers::Enum

    set_fully_qualified_name "GetImageRequest.AppImageUsage"

    ICON = 0
    SCREENSHOT = 1
    SCREENSHOT_THUMBNAIL = 2
    PROMO_BADGE = 3
    BILING_ICON = 4
  end

  set_fully_qualified_name "GetImageRequest"

  optional :string, :appId, 1
  optional ::GetImageRequest::AppImageUsage, :imageUsage, 3
  optional :string, :imageId, 4
end

class GetAssetRequest < ::ProtocolBuffers::Message
  set_fully_qualified_name "GetAssetRequest"

  required :string, :assetId, 1
  optional :string, :directDownloadKey, 2
end

class GetImageResponse < ::ProtocolBuffers::Message
  set_fully_qualified_name "GetImageResponse"

  optional :bytes, :imageData, 1
end

class GetAssetResponse < ::ProtocolBuffers::Message
  # forward declarations
  class InstallAsset < ::ProtocolBuffers::Message; end

  set_fully_qualified_name "GetAssetResponse"

  # nested messages
  class InstallAsset < ::ProtocolBuffers::Message
    set_fully_qualified_name "GetAssetResponse.InstallAsset"

    optional :string, :assetId, 2
    optional :string, :assetName, 3
    optional :string, :assetType, 4
    optional :string, :assetPackage, 5
    optional :string, :blobUrl, 6
    optional :string, :assetSignature, 7
    optional :uint64, :assetSize, 8
    optional :uint64, :refundTimeout, 9
    optional :bool, :forwardLocked, 10
    optional :bool, :secured, 11
    optional :int32, :versionCode, 12
    optional :string, :downloadAuthCookieName, 13
    optional :string, :downloadAuthCookieValue, 14
  end

  repeated ::GetAssetResponse::InstallAsset, :installasset, 1, :group => true
end

class Request < ::ProtocolBuffers::Message
  # forward declarations
  class RequestGroup < ::ProtocolBuffers::Message; end

  set_fully_qualified_name "Request"

  # nested messages
  class RequestGroup < ::ProtocolBuffers::Message
    set_fully_qualified_name "Request.RequestGroup"

    optional ::AppsRequest, :appsRequest, 4
    optional ::CommentsRequest, :commentsRequest, 5
    optional ::GetAssetRequest, :getAssetRequest, 10
    optional ::GetImageRequest, :imageRequest, 11
    optional ::SubCategoriesRequest, :subCategoriesRequest, 14
    optional ::CategoriesRequest, :categoriesRequest, 21
  end

  optional ::RequestContext, :context, 1
  repeated ::Request::RequestGroup, :requestgroup, 2, :group => true
end

class ResponseContext < ::ProtocolBuffers::Message
  # forward declarations

  # enums
  module ResultType
    include ::ProtocolBuffers::Enum

    set_fully_qualified_name "ResponseContext.ResultType"

    OK = 0
    BAD_REQUEST = 1
    INTERNAL_SERVICE_ERROR = 2
    NOT_MODIFIED = 3
    USER_INPUT_ERROR = 4
  end

  set_fully_qualified_name "ResponseContext"

  optional ::ResponseContext::ResultType, :result, 1
  optional :int32, :maxAge, 2
  optional :string, :etag, 3
  optional :int32, :serverVersion, 4
end

class Response < ::ProtocolBuffers::Message
  # forward declarations
  class ResponseGroup < ::ProtocolBuffers::Message; end

  set_fully_qualified_name "Response"

  # nested messages
  class ResponseGroup < ::ProtocolBuffers::Message
    set_fully_qualified_name "Response.ResponseGroup"

    optional ::ResponseContext, :context, 2
    optional ::AppsResponse, :appsResponse, 3
    optional ::CommentsResponse, :commentsResponse, 4
    optional ::GetAssetResponse, :getAssetResponse, 9
    optional ::GetImageResponse, :imageResponse, 10
    optional ::CategoriesResponse, :categoriesResponse, 20
    optional ::SubCategoriesResponse, :subCategoriesResponse, 13
  end

  repeated ::Response::ResponseGroup, :responsegroup, 1, :group => true
end

